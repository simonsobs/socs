#
# PySNMP MIB module MBG-SNMP-LTNG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file://./MBG-SNMP-LTNG-MIB.mib
# Produced by pysmi-0.3.4 at Fri May  1 22:39:55 2020
# On host grumpy platform Linux version 4.15.0-88-generic by user bjk49
# Using Python version 3.6.9 (default, Apr 18 2020, 01:56:04)
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
MeinbergSwitch, mbgSnmpRoot = mibBuilder.importSymbols("MBG-SNMP-ROOT-MIB", "MeinbergSwitch", "mbgSnmpRoot")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
sysName, snmpTrapEnterprise = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "snmpTrapEnterprise")
IpAddress, Gauge32, ModuleIdentity, Bits, Integer32, ObjectIdentity, Counter64, NotificationType, iso, TimeTicks, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "ModuleIdentity", "Bits", "Integer32", "ObjectIdentity", "Counter64", "NotificationType", "iso", "TimeTicks", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mbgLantimeNG = ModuleIdentity((1, 3, 6, 1, 4, 1, 5597, 30))
mbgLantimeNG.setRevisions(('2018-11-21 07:50', '2017-10-10 06:33', '2016-05-18 05:17', '2015-08-27 08:44', '2015-04-17 06:32', '2014-11-25 07:24', '2014-08-29 08:10', '2014-01-30 09:19', '2013-11-01 09:39', '2013-10-09 11:50', '2013-10-01 08:10', '2013-09-18 12:16', '2013-02-20 07:00', '2012-11-07 14:20', '2012-03-30 07:13', '2012-01-25 07:45', '2011-09-12 08:18', '2011-09-02 11:10', '2011-06-21 09:30', '2011-05-20 10:00', '2011-05-16 13:30',))
if mibBuilder.loadTexts: mbgLantimeNG.setLastUpdated('201811210750Z')
if mibBuilder.loadTexts: mbgLantimeNG.setOrganization('Meinberg Radio Clocks GmbH & Co. KG')
mbgLantimeNGStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0))
mbgLtNgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 0))
mbgLtNgSnmpSubagentVersion = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 0, 1), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSnmpSubagentVersion.setStatus('current')
mbgLtNgFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 0, 2), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgFirmwareVersion.setStatus('current')
mbgLtNgSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 0, 3), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSerialNumber.setStatus('current')
mbgLtNgSubagentTimeticks = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 0, 4), Counter64()).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSubagentTimeticks.setStatus('current')
mbgLtNgCpuSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 0, 5), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCpuSerialNumber.setStatus('current')
mbgLtNgRefclock = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1))
mbgLtNgNumberOfRefclocks = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNumberOfRefclocks.setStatus('current')
mbgLtNgRefclockTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2), )
if mibBuilder.loadTexts: mbgLtNgRefclockTable.setStatus('current')
mbgLtNgRefclockTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockIndex"))
if mibBuilder.loadTexts: mbgLtNgRefclockTableEntry.setStatus('current')
mbgLtNgRefclockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: mbgLtNgRefclockIndex.setStatus('current')
mbgLtNgRefclockType = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102))).clone(namedValues=NamedValues(("unknown", 0), ("gps166", 1), ("gps167", 2), ("gps167SV", 3), ("gps167PC", 4), ("gps167PCI", 5), ("gps163", 6), ("gps168PCI", 7), ("gps161", 8), ("gps169PCI", 9), ("tcr167PCI", 10), ("gps164", 11), ("gps170PCI", 12), ("pzf511", 13), ("gps170", 14), ("tcr511", 15), ("am511", 16), ("msf511", 17), ("grc170", 18), ("gps170PEX", 19), ("gps162", 20), ("ptp270PEX", 21), ("frc511PEX", 22), ("gen170", 23), ("tcr170PEX", 24), ("wwvb511", 25), ("mgr170", 26), ("jjy511", 27), ("pzf600", 28), ("tcr600", 29), ("gps180", 30), ("gln170", 31), ("gps180PEX", 32), ("tcr180PEX", 33), ("pzf180PEX", 34), ("mgr180", 35), ("msf600", 36), ("wwvb600", 37), ("jjy600", 38), ("gps180HS", 39), ("gps180AMC", 40), ("esi180", 41), ("cpe180", 42), ("lno180", 43), ("grc180", 44), ("liu", 45), ("dcf600HS", 46), ("dcf600RS", 47), ("mri", 48), ("bpe", 49), ("gln180Pex", 50), ("n2x", 51), ("rsc180", 52), ("lneGb", 53), ("lnePpg180", 54), ("scg", 55), ("mdu300", 56), ("sdi", 57), ("fdm180", 58), ("spt", 59), ("pzf180", 60), ("rel1000", 61), ("hps100", 62), ("vsg180", 63), ("msf180", 64), ("wwvb180", 65), ("cpc180", 66), ("ctc100", 67), ("tcr180", 68), ("lue180", 69), ("cpc01", 70), ("tsu01", 71), ("cmc01", 72), ("scu01", 73), ("fcu01", 74), ("mssb100", 75), ("lne180sfp", 76), ("gts180", 77), ("gps180csm", 78), ("grc181", 79), ("n2x180", 80), ("gns180pex", 81), ("mdu180", 82), ("mdu312", 83), ("gps165", 84), ("gns181UC", 85), ("psx4GE", 86), ("rsc180rdu", 87), ("wtf", 88), ("fdm180m", 89), ("lsg180", 90), ("gps190", 91), ("gns181", 92), ("pio180", 93), ("fcm180", 94), ("tcr180usb", 95), ("ssp100", 96), ("gns165", 97), ("rsc180rdmp", 98), ("gps16x", 99), ("mshps100", 100), ("bpestm", 101), ("vsi180", 102)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockType.setStatus('current')
mbgLtNgRefclockUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 0), ("secondary", 1), ("compare", 2), ("primary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockUsage.setStatus('current')
mbgLtNgRefclockState = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("synchronized", 1), ("notSynchronized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockState.setStatus('current')
mbgLtNgRefclockSubstate = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 50, 51, 52, 100, 101, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167))).clone(namedValues=NamedValues(("mrsRefNone", -1), ("notAvailable", 0), ("gpsSync", 1), ("gpsTracking", 2), ("gpsAntennaDisconnected", 3), ("gpsWarmBoot", 4), ("gpsColdBoot", 5), ("gpsAntennaShortCircuit", 6), ("lwNeverSync", 50), ("lwNotSync", 51), ("lwSync", 52), ("tcrNotSync", 100), ("tcrSync", 101), ("mrsIntOscSync", 149), ("mrsGpsSync", 150), ("mrs10MhzSync", 151), ("mrsPpsInSync", 152), ("mrs10MhzPpsInSync", 153), ("mrsIrigSync", 154), ("mrsNtpSync", 155), ("mrsPtpIeee1588Sync", 156), ("mrsPtpOverE1Sync", 157), ("mrsFixedFreqInSync", 158), ("mrsPpsStringSync", 159), ("mrsVarFreqGpioSync", 160), ("mrsReserved", 161), ("mrsDcf77PzfSync", 162), ("mrsLongwaveSync", 163), ("mrsGlonassGpsSync", 164), ("mrsHavequickSync", 165), ("mrsExtOscSync", 166), ("mrsSyncE", 167)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockSubstate.setStatus('current')
mbgLtNgRefclockStatusA = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockStatusA.setStatus('current')
mbgLtNgRefclockMaxStatusA = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockMaxStatusA.setStatus('current')
mbgLtNgRefclockStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockStatusB.setStatus('current')
mbgLtNgRefclockMaxStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockMaxStatusB.setStatus('current')
mbgLtNgRefclockAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAvailable", 0), ("leapSecondAnnounced", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockAdditionalInfo.setStatus('current')
mbgLtNgRefclockLeapSecondDate = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 11), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockLeapSecondDate.setStatus('current')
mbgLtNgRefclockGpsTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3), )
if mibBuilder.loadTexts: mbgLtNgRefclockGpsTable.setStatus('current')
mbgLtNgRefclockGpsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsIndex"))
if mibBuilder.loadTexts: mbgLtNgRefclockGpsTableEntry.setStatus('current')
mbgLtNgRefclockGpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgRefclockGpsIndex.setStatus('current')
mbgLtNgRefclockGpsLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsLatitude.setStatus('current')
mbgLtNgRefclockGpsLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 3), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsLongitude.setStatus('current')
mbgLtNgRefclockGpsAltitude = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 4), Integer32().clone(-1)).setUnits('m').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsAltitude.setStatus('current')
mbgLtNgRefclockGpsTdop = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 5), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsTdop.setStatus('current')
mbgLtNgRefclockGpsPdop = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 6), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsPdop.setStatus('current')
mbgLtNgRefclockGpsUtcOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 7), Integer32().clone(-1)).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsUtcOffset.setStatus('current')
mbgLtNgRefclockTimeDiff = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 4), Integer32()).setUnits('us').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockTimeDiff.setStatus('current')
mbgLtNgRefclockGpsPos = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 5), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsPos.setStatus('current')
mbgLtNgNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2))
mbgLtNgNtpCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("notSynchronized", 1), ("synchronized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCurrentState.setStatus('current')
mbgLtNgNtpStratum = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpStratum.setStatus('current')
mbgLtNgNtpRefclockName = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 3), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpRefclockName.setStatus('current')
mbgLtNgNtpRefclockOffset = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 4), DisplayString().clone('n/a')).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpRefclockOffset.setStatus('current')
mbgLtNgNtpVersion = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 5), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpVersion.setStatus('current')
mbgLtNgNtpClientCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8))
mbgLtNgNtpCCStartedAt = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCStartedAt.setStatus('current')
mbgLtNgNtpCCDuration = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 2), Unsigned32()).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCDuration.setStatus('current')
mbgLtNgNtpCCNumberOfClients = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCNumberOfClients.setStatus('current')
mbgLtNgNtpCCTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCTotalRequests.setStatus('obsolete')
mbgLtNgNtpCCTotalRequestsCurrentDay = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCTotalRequestsCurrentDay.setStatus('current')
mbgLtNgNtpCCTotalRequestsLastHour = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCTotalRequestsLastHour.setStatus('current')
mbgLtNgNtpCCTotalRequestsLastMinute = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCTotalRequestsLastMinute.setStatus('current')
mbgLtNgNtpCCTodaysClients = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCTodaysClients.setStatus('current')
mbgLtNgNtpMrs = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 9))
mbgLtNgNtpMrsServer = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 9, 1), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpMrsServer.setStatus('current')
mbgLtNgNtpMrsOffset = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 9, 2), DisplayString().clone('n/a')).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpMrsOffset.setStatus('current')
mbgLtNgPtp = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3))
mbgLtNgPtpNumberOfModules = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpNumberOfModules.setStatus('current')
mbgLtNgPtpTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2), )
if mibBuilder.loadTexts: mbgLtNgPtpTable.setStatus('current')
mbgLtNgPtpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgPtpIndex"))
if mibBuilder.loadTexts: mbgLtNgPtpTableEntry.setStatus('current')
mbgLtNgPtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgPtpIndex.setStatus('current')
mbgLtNgPtpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("stopped", 1), ("master", 2), ("slave", 3), ("ordinary", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpMode.setStatus('obsolete')
mbgLtNgPtpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("uninitialized", 0), ("initializing", 1), ("faulty", 2), ("disabled", 3), ("listening", 4), ("preMaster", 5), ("master", 6), ("passive", 7), ("uncalibrated", 8), ("slave", 9))).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpPortState.setStatus('current')
mbgLtNgPtpGrandmasterMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 4), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpGrandmasterMac.setStatus('current')
mbgLtNgPtpClockAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 254))).clone(namedValues=NamedValues(("notAvailable", 0), ("timeAccurateTo25ns", 32), ("timeAccurateTo100ns", 33), ("timeAccurateTo250ns", 34), ("timeAccurateTo1us", 35), ("timeAccurateTo2Point5us", 36), ("timeAccurateTo10us", 37), ("timeAccurateTo25us", 38), ("timeAccurateTo100us", 39), ("timeAccurateTo250us", 40), ("timeAccurateTo1ms", 41), ("timeAccurateTo2to5ms", 42), ("timeAccurateTo10ms", 43), ("timeAccurateTo25ms", 44), ("timeAccurateTo100ms", 45), ("timeAccurateTo250ms", 46), ("timeAccurateTo1s", 47), ("timeAccurateTo10s", 48), ("timeAccurateToGT10s", 49), ("timeAccurateToUnknown", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpClockAccuracy.setStatus('current')
mbgLtNgPtpClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpClockClass.setStatus('current')
mbgLtNgPtpTimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16, 32, 48, 64, 80, 96, 144, 160))).clone(namedValues=NamedValues(("notAvailable", 0), ("atomicClock", 16), ("gps", 32), ("terrestrialRadio", 48), ("ptp", 64), ("ntp", 80), ("handSet", 96), ("other", 144), ("internalOscillator", 160)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpTimeSource.setStatus('current')
mbgLtNgPtpUtcOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 8), Unsigned32().clone(35)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpUtcOffset.setStatus('current')
mbgLtNgPtpTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 9), Counter64()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpTimeSeconds.setStatus('current')
mbgLtNgPtpTsuTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 10), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpTsuTime.setStatus('current')
mbgLtNgPtpSysTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 11), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpSysTime.setStatus('current')
mbgLtNgPtpPortLinkup = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 12), MeinbergSwitch()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpPortLinkup.setStatus('current')
mbgLtNgPtpOffsetFromGM = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 13), DisplayString().clone('n/a')).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpOffsetFromGM.setStatus('current')
mbgLtNgPtpPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 14), DisplayString().clone('n/a')).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpPathDelay.setStatus('current')
mbgLtNgPtpDelayMec = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("end2End", 0), ("peer2Peer", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpDelayMec.setStatus('current')
mbgLtNgPtpDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpDomain.setStatus('current')
mbgLtNgPtpGrandmasterUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 17), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpGrandmasterUuid.setStatus('current')
mbgLtNgPtpLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 18), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpLocalMac.setStatus('current')
mbgLtNgPtpDelayAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 19), DisplayString().clone('n/a')).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpDelayAsymmetry.setStatus('current')
mbgLtNgPtpAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpAvail.setStatus('current')
mbgLtNgFdm = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 4))
mbgLtNgFdmFreq = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 4, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(45000, 65000), ))).setUnits('mHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgFdmFreq.setStatus('current')
mbgLtNgFdmFreqDev = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15000, 15000))).setUnits('mHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgFdmFreqDev.setStatus('current')
mbgLtNgFdmNomFreq = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 4, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(60000, 60000), ))).setUnits('mHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgFdmNomFreq.setStatus('current')
mbgLtNgSystemHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5))
mbgLtNgSysPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 0))
mbgLtNgSysNumberOfPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 0, 1), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSysNumberOfPowerSupplies.setStatus('current')
mbgLtNgSysPsTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 0, 2), )
if mibBuilder.loadTexts: mbgLtNgSysPsTable.setStatus('current')
mbgLtNgSysPsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 0, 2, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgSysPsIndex"))
if mibBuilder.loadTexts: mbgLtNgSysPsTableEntry.setStatus('current')
mbgLtNgSysPsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 0, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgSysPsIndex.setStatus('current')
mbgLtNgSysPsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 0, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSysPsStatus.setStatus('current')
mbgLtNgSysFan = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1))
mbgLtNgSysNumberOfFans = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSysNumberOfFans.setStatus('current')
mbgLtNgSysFanTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1, 2), )
if mibBuilder.loadTexts: mbgLtNgSysFanTable.setStatus('current')
mbgLtNgSysFanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1, 2, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgSysFanIndex"))
if mibBuilder.loadTexts: mbgLtNgSysFanTableEntry.setStatus('current')
mbgLtNgSysFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgSysFanIndex.setStatus('current')
mbgLtNgSysFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSysFanStatus.setStatus('current')
mbgLtNgSysFanError = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSysFanError.setStatus('current')
mbgLtNgSysTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 2))
mbgLtNgSysTempCelsius = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 2, 1), Unsigned32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSysTempCelsius.setStatus('current')
mbgLtNgCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6))
mbgLtNgNumberOfClusters = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNumberOfClusters.setStatus('current')
mbgLtNgClusterTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2), )
if mibBuilder.loadTexts: mbgLtNgClusterTable.setStatus('current')
mbgLtNgClusterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgClusterIndex"))
if mibBuilder.loadTexts: mbgLtNgClusterTableEntry.setStatus('current')
mbgLtNgClusterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgClusterIndex.setStatus('current')
mbgLtNgClusterCommunicationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterCommunicationIp.setStatus('current')
mbgLtNgClusterPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 0), ("master", 1), ("slave", 2), ("listening", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterPortState.setStatus('current')
mbgLtNgClusterMasterSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 4), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterMasterSerial.setStatus('current')
mbgLtNgClusterMasterIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 5), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterMasterIp.setStatus('current')
mbgLtNgClusterMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterMasterPriority.setStatus('current')
mbgLtNgClusterClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notAvailable", 0), ("gps", 3), ("pzf", 4), ("am", 5), ("irig", 6), ("pps", 7), ("ptp", 8), ("ntp", 9), ("e1", 10), ("rdt", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterClockClass.setStatus('current')
mbgLtNgClusterClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("normalOperation", 1), ("freeRunningOrTracking", 2), ("antennaFailure", 3), ("invalid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterClockStatus.setStatus('current')
mbgLtNgClusterReconfigurationState = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 0), ("normal", 1), ("masterToSlave", 2), ("slaveToMaster", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterReconfigurationState.setStatus('current')
mbgLtNgClusterIsFalseticker = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterIsFalseticker.setStatus('current')
mbgLtNgMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 7))
mbgLtNgEthPortLinkTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 7, 1), )
if mibBuilder.loadTexts: mbgLtNgEthPortLinkTable.setStatus('current')
mbgLtNgEthPortLinkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 7, 1, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgEthPortLinkIndex"))
if mibBuilder.loadTexts: mbgLtNgEthPortLinkTableEntry.setStatus('current')
mbgLtNgEthPortLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgEthPortLinkIndex.setStatus('current')
mbgLtNgEthPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgEthPortLinkState.setStatus('current')
mbgLtNgConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1))
mbgLtNgCfgEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0))
mbgLtNgCfgEthernetHostname = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 1), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetHostname.setStatus('current')
mbgLtNgCfgEthernetDomain = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetDomain.setStatus('current')
mbgLtNgCfgEthernetNameserver1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetNameserver1.setStatus('current')
mbgLtNgCfgEthernetNameserver2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 4), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetNameserver2.setStatus('current')
mbgLtNgCfgEthernetIpv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 5), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetIpv4Gateway.setStatus('current')
mbgLtNgCfgEthernetIpv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 6), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetIpv6Gateway.setStatus('current')
mbgLtNgCfgNumberOfPhysicalIf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgNumberOfPhysicalIf.setStatus('current')
mbgLtNgCfgNumberOfVirtualIf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgNumberOfVirtualIf.setStatus('current')
mbgLtNgCfgPhysicalIfTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9), )
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfTable.setStatus('current')
mbgLtNgCfgPhysicalIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPhysicalIfIndex"))
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfTableEntry.setStatus('current')
mbgLtNgCfgPhysicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfIndex.setStatus('current')
mbgLtNgCfgPhysicalIfMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfMac.setStatus('current')
mbgLtNgCfgPhysicalIfNetLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("auto", 0), ("hd10Mbit", 1), ("fd10Mbit", 2), ("hd100Mbit", 3), ("fd100Mbit", 4), ("hd1000Mbit", 5), ("fd1000Mbit", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfNetLinkMode.setStatus('current')
mbgLtNgCfgPhysicalIfIndicateLink = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1, 4), MeinbergSwitch().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfIndicateLink.setStatus('current')
mbgLtNgCfgPhysicalIfBondingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfBondingGroup.setStatus('current')
mbgLtNgCfgPhysicalIfIpv6Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("deactivated", 0), ("activated", 1), ("activatedWithAutoconf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfIpv6Mode.setStatus('current')
mbgLtNgCfgVirtualIfTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10), )
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfTable.setStatus('current')
mbgLtNgCfgVirtualIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIndex"))
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfTableEntry.setStatus('current')
mbgLtNgCfgVirtualIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIndex.setStatus('current')
mbgLtNgCfgVirtualIfIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4Addr.setStatus('current')
mbgLtNgCfgVirtualIfIpv4Netmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4Netmask.setStatus('current')
mbgLtNgCfgVirtualIfIpv4Dhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 4), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4Dhcp.setStatus('current')
mbgLtNgCfgVirtualIfIpv4AddrFromDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 5), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4AddrFromDhcp.setStatus('current')
mbgLtNgCfgVirtualIfIpv4NetmaskFromDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 6), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4NetmaskFromDhcp.setStatus('current')
mbgLtNgCfgVirtualIfIpv4BroadcastFromDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 7), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4BroadcastFromDhcp.setStatus('current')
mbgLtNgCfgVirtualIfIpv4GatewayFromDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 8), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4GatewayFromDhcp.setStatus('current')
mbgLtNgCfgVirtualIfIpv4DnsFromDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 9), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4DnsFromDhcp.setStatus('current')
mbgLtNgCfgVirtualIfIpv4DomainFromDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 10), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4DomainFromDhcp.setStatus('current')
mbgLtNgCfgVirtualIfIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 11), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv6Addr.setStatus('current')
mbgLtNgCfgVirtualIfIpv6Dhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 12), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv6Dhcp.setStatus('current')
mbgLtNgCfgVirtualIfIpv6RoutAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 13), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv6RoutAdd.setStatus('current')
mbgLtNgCfgVirtualIfIpv6LinkLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 14), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv6LinkLocal.setStatus('current')
mbgLtNgCfgVirtualIfAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfAssigned.setStatus('current')
mbgLtNgCfgVirtualIfMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 16), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfMac.setStatus('current')
mbgLtNgCfgVirtualIfLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 17), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfLabel.setStatus('current')
mbgLtNgCfgVirtualIfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 18), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfVlan.setStatus('current')
mbgLtNgCfgVirtualIfVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfVlanTag.setStatus('current')
mbgLtNgCfgVirtualIfVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfVlanPrio.setStatus('current')
mbgLtNgCfgVirtualIfCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 21), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfCluster.setStatus('current')
mbgLtNgCfgVirtualIfClusterIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 22), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfClusterIpv4Addr.setStatus('current')
mbgLtNgCfgVirtualIfClusterIpv4Netmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 23), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfClusterIpv4Netmask.setStatus('current')
mbgLtNgCfgVirtualIfClusterPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfClusterPrio.setStatus('current')
mbgLtNgCfgVirtualIfServiceNtp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 25), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceNtp.setStatus('current')
mbgLtNgCfgVirtualIfServiceHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 26), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceHttp.setStatus('current')
mbgLtNgCfgVirtualIfServiceHttps = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 27), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceHttps.setStatus('current')
mbgLtNgCfgVirtualIfServiceTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 28), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceTelnet.setStatus('current')
mbgLtNgCfgVirtualIfServiceSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 29), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceSsh.setStatus('current')
mbgLtNgCfgVirtualIfServiceSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 30), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceSnmp.setStatus('current')
mbgLtNgCfgVirtualIfServiceFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 31), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceFtp.setStatus('current')
mbgLtNgCfgVirtualIfServiceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 32), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceTime.setStatus('current')
mbgLtNgCfgVirtualIfServiceDaytime = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 33), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceDaytime.setStatus('current')
mbgLtNgCfgVirtualIfServiceFpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 34), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceFpc.setStatus('current')
mbgLtNgCfgEthernetGenClusterPort = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetGenClusterPort.setStatus('current')
mbgLtNgCfgEthernetGenClusterIp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetGenClusterIp.setStatus('current')
mbgLtNgCfgNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1))
mbgLtNgCfgSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 0))
mbgLtNgCfgSyslogServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 0, 1), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSyslogServerAddr.setStatus('current')
mbgLtNgCfgSyslogLoglevel = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 0, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSyslogLoglevel.setStatus('current')
mbgLtNgCfgEmail = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1))
mbgLtNgCfgEmailTo = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 1), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailTo.setStatus('current')
mbgLtNgCfgEmailFrom = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailFrom.setStatus('current')
mbgLtNgCfgEmailSmarthostAddr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostAddr.setStatus('current')
mbgLtNgCfgEmailSmarthostPort = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostPort.setStatus('current')
mbgLtNgCfgEmailSmarthostAuth = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 5), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostAuth.setStatus('current')
mbgLtNgCfgEmailSmarthostAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 6), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostAuthUser.setStatus('current')
mbgLtNgCfgEmailSmarthostAuthPw = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 7), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostAuthPw.setStatus('current')
mbgLtNgCfgWinpopup = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 2))
mbgLtNgCfgWmailAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 2, 1), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgWmailAddress1.setStatus('current')
mbgLtNgCfgWmailAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 2, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgWmailAddress2.setStatus('current')
mbgLtNgCfgSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3))
mbgLtNgCfgSnmpTrapRecTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 1), )
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecTable.setStatus('current')
mbgLtNgCfgSnmpTrapRecTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 1, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpTrapRecIndex"))
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecTableEntry.setStatus('current')
mbgLtNgCfgSnmpTrapRecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecIndex.setStatus('current')
mbgLtNgCfgSnmpTrapRecAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 1, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecAddr.setStatus('current')
mbgLtNgCfgSnmpTrapRecCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 1, 1, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecCommunity.setStatus('current')
mbgLtNgCfgSnmpTrapRecVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecVersion.setStatus('current')
mbgLtNgCfgSnmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 2), DisplayString().clone('****')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpReadCommunity.setStatus('current')
mbgLtNgCfgSnmpWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 3), DisplayString().clone('****')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpWriteCommunity.setStatus('current')
mbgLtNgCfgSnmpContact = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 4), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpContact.setStatus('current')
mbgLtNgCfgSnmpLocation = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 5), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpLocation.setStatus('current')
mbgLtNgCfgSnmpV3UserName = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 6), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3UserName.setStatus('current')
mbgLtNgCfgSnmpV3UserRights = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("readonly", 0), ("readwrite", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3UserRights.setStatus('current')
mbgLtNgCfgSnmpV3Context = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 8), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3Context.setStatus('current')
mbgLtNgCfgSnmpV3SecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 9), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3SecurityLevel.setStatus('current')
mbgLtNgCfgSnmpV3AuthProtocol = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 10), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3AuthProtocol.setStatus('current')
mbgLtNgCfgSnmpV3AuthPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 11), DisplayString().clone('****')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3AuthPassphrase.setStatus('current')
mbgLtNgCfgSnmpV3PrivProtocol = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 12), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3PrivProtocol.setStatus('current')
mbgLtNgCfgSnmpV3PrivPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 13), DisplayString().clone('****')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3PrivPassphrase.setStatus('current')
mbgLtNgCfgSnmpRetries = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 14), Unsigned32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpRetries.setStatus('current')
mbgLtNgCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 15), Unsigned32().clone(3)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTimeout.setStatus('current')
mbgLtNgCfgSnmpEnabledVersion = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("v1ANDv2c", 0), ("v3only", 1), ("v1ANDv2cANDv3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpEnabledVersion.setStatus('current')
mbgLtNgCfgWalldisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 4))
mbgLtNgCfgVP100Display1Addr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 4, 1), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVP100Display1Addr.setStatus('current')
mbgLtNgCfgVP100Display1SN = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 4, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVP100Display1SN.setStatus('current')
mbgLtNgCfgVP100Display2Addr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 4, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVP100Display2Addr.setStatus('current')
mbgLtNgCfgVP100Display2SN = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 4, 4), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVP100Display2SN.setStatus('current')
mbgLtNgCfgNtpClientMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 5))
mbgLtNgCfgNtpMaxClientOffset = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 5, 1), Unsigned32().clone(10)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpMaxClientOffset.setStatus('current')
mbgLtNgCfgNtpMaxClientStratum = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpMaxClientStratum.setStatus('current')
mbgLtNgCfgTrapTrigger = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6))
mbgLtNgCfgTrapNormalOperation = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 1), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNormalOperation.setStatus('current')
mbgLtNgCfgTrapNtpNotSync = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNtpNotSync.setStatus('current')
mbgLtNgCfgTrapNtpSync = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNtpSync.setStatus('current')
mbgLtNgCfgTrapNtpStopped = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 4), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNtpStopped.setStatus('current')
mbgLtNgCfgTrapServerBoot = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 5), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapServerBoot.setStatus('current')
mbgLtNgCfgTrapRefclockNotResponding = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 6), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefclockNotResponding.setStatus('current')
mbgLtNgCfgTrapRefclockSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 7), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefclockSynchronized.setStatus('current')
mbgLtNgCfgTrapRefclockNotSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 8), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefclockNotSynchronized.setStatus('current')
mbgLtNgCfgTrapSecRefclockNotResponding = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 9), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapSecRefclockNotResponding.setStatus('current')
mbgLtNgCfgTrapSecRefclockSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 10), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapSecRefclockSynchronized.setStatus('current')
mbgLtNgCfgTrapSecRefclockNotSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 11), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapSecRefclockNotSynchronized.setStatus('current')
mbgLtNgCfgTrapAntennaFaulty = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 12), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapAntennaFaulty.setStatus('current')
mbgLtNgCfgTrapAntennaReconnect = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 13), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapAntennaReconnect.setStatus('current')
mbgLtNgCfgTrapAntennaShortCircuit = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 14), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapAntennaShortCircuit.setStatus('current')
mbgLtNgCfgTrapConfigChanged = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 15), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapConfigChanged.setStatus('current')
mbgLtNgCfgTrapLeapSecAnnounced = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 16), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapLeapSecAnnounced.setStatus('current')
mbgLtNgCfgTrapNtpClientLimitExceeded = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 17), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNtpClientLimitExceeded.setStatus('current')
mbgLtNgCfgTrapRefSrcLimitExceeded = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 18), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefSrcLimitExceeded.setStatus('current')
mbgLtNgCfgTrapRefSrcDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 19), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefSrcDisconnected.setStatus('current')
mbgLtNgCfgTrapRefSrcReconnected = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 20), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefSrcReconnected.setStatus('current')
mbgLtNgCfgTrapShsTimeLimitError = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 21), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapShsTimeLimitError.setStatus('current')
mbgLtNgCfgTrapShsTimeLimitWarning = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 22), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapShsTimeLimitWarning.setStatus('current')
mbgLtNgCfgTrapNetworkDown = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 23), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNetworkDown.setStatus('current')
mbgLtNgCfgTrapNetworkUp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 24), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNetworkUp.setStatus('current')
mbgLtNgCfgTrapPowerSupplyUp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 25), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapPowerSupplyUp.setStatus('current')
mbgLtNgCfgTrapPowerSupplyDown = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 26), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapPowerSupplyDown.setStatus('current')
mbgLtNgCfgTrapFdmError = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 27), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapFdmError.setStatus('current')
mbgLtNgCfgTrapLowSystemResources = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 28), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapLowSystemResources.setStatus('current')
mbgLtNgCfgTrapPtpNetworkDown = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 29), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapPtpNetworkDown.setStatus('current')
mbgLtNgCfgTrapPtpNetworkUp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 30), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapPtpNetworkUp.setStatus('current')
mbgLtNgCfgTrapPtpStateChanged = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 31), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapPtpStateChanged.setStatus('current')
mbgLtNgCfgTrapPtpError = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 32), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapPtpError.setStatus('current')
mbgLtNgCfgTrapFanDown = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 33), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapFanDown.setStatus('current')
mbgLtNgCfgTrapFanUp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 34), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapFanUp.setStatus('current')
mbgLtNgCfgRepeatEvent = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("never", 0), ("everyMinute", 1), ("everyHour", 2), ("everyDay", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgRepeatEvent.setStatus('current')
mbgLtNgCfgRepetitions = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgRepetitions.setStatus('current')
mbgLtNgCfgTrapWarmedUp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 37), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapWarmedUp.setStatus('current')
mbgLtNgCfgTrapNotWarmedUp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 38), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNotWarmedUp.setStatus('current')
mbgLtNgCfgSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2))
mbgLtNgCfgLoginAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 0))
mbgLtNgCfgDisableRootLogin = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 0, 1), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgDisableRootLogin.setStatus('current')
mbgLtNgCfgAllowNetworkDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 0, 2), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgAllowNetworkDiscovery.setStatus('current')
mbgLtNgCfgFrontPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 1))
mbgLtNgCfgLockFrontPanel = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 1, 1), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgLockFrontPanel.setStatus('current')
mbgLtNgCfgDisableUsbPort = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 1, 2), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgDisableUsbPort.setStatus('current')
mbgLtNgCfgSsh = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 2))
mbgLtNgCfgSshKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 2, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(768, 768), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), ValueRangeConstraint(8192, 8192), ValueRangeConstraint(16384, 16384), ValueRangeConstraint(32768, 32768), )).clone(1024)).setUnits('bits').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSshKeyLength.setStatus('current')
mbgLtNgCfgSshShellTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 2, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 60), ValueRangeConstraint(120, 120), ValueRangeConstraint(300, 300), ValueRangeConstraint(600, 600), ValueRangeConstraint(3600, 3600), ValueRangeConstraint(10800, 10800), ValueRangeConstraint(18000, 18000), ValueRangeConstraint(86400, 86400), )).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSshShellTimeout.setStatus('current')
mbgLtNgCfgNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3))
mbgLtNgCfgNtpTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1), )
if mibBuilder.loadTexts: mbgLtNgCfgNtpTable.setStatus('current')
mbgLtNgCfgNtpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpIndex"))
if mibBuilder.loadTexts: mbgLtNgCfgNtpTableEntry.setStatus('current')
mbgLtNgCfgNtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: mbgLtNgCfgNtpIndex.setStatus('current')
mbgLtNgCfgNtpServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerIP.setStatus('current')
mbgLtNgCfgNtpServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerKey.setStatus('current')
mbgLtNgCfgNtpServerAutokey = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 4), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerAutokey.setStatus('current')
mbgLtNgCfgNtpServerMinpoll = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerMinpoll.setStatus('current')
mbgLtNgCfgNtpServerMaxpoll = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerMaxpoll.setStatus('current')
mbgLtNgCfgNtpServerIburst = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 7), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerIburst.setStatus('current')
mbgLtNgCfgNtpBMTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2), )
if mibBuilder.loadTexts: mbgLtNgCfgNtpBMTable.setStatus('current')
mbgLtNgCfgNtpBMTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpBMIndex"))
if mibBuilder.loadTexts: mbgLtNgCfgNtpBMTableEntry.setStatus('current')
mbgLtNgCfgNtpBMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: mbgLtNgCfgNtpBMIndex.setStatus('current')
mbgLtNgCfgNtpBroadAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgNtpBroadAddr.setStatus('current')
mbgLtNgCfgNtpBroadSymKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgNtpBroadSymKey.setStatus('current')
mbgLtNgCfgNtpBroadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgNtpBroadInterval.setStatus('current')
mbgLtNgCfgNtpBroadUseAutokey = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2, 1, 5), MeinbergSwitch()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgNtpBroadUseAutokey.setStatus('current')
mbgLtNgCfgNtpEnableMulticast = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 3), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpEnableMulticast.setStatus('current')
mbgLtNgCfgNtpMultiAddr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 4), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpMultiAddr.setStatus('current')
mbgLtNgCfgNtpMultiInterval = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpMultiInterval.setStatus('current')
mbgLtNgCfgNtpMultiSymKey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpMultiSymKey.setStatus('current')
mbgLtNgCfgNtpMultiUseAutokey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 7), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpMultiUseAutokey.setStatus('current')
mbgLtNgCfgNtpEnableManycast = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 8), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpEnableManycast.setStatus('current')
mbgLtNgCfgNtpManyAddr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 9), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpManyAddr.setStatus('current')
mbgLtNgCfgNtpManySymKey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpManySymKey.setStatus('current')
mbgLtNgCfgNtpManyUseAutokey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 12), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpManyUseAutokey.setStatus('current')
mbgLtNgCfgNtpLocalClkStratum = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpLocalClkStratum.setStatus('current')
mbgLtNgCfgNtpDisableLocalClk = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 14), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpDisableLocalClk.setStatus('current')
mbgLtNgCfgNtpSpoofLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 15), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpSpoofLocalTime.setStatus('obsolete')
mbgLtNgCfgNtpLocalTrustedKeys = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 16), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpLocalTrustedKeys.setStatus('current')
mbgLtNgCfgNtpTrusttime = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 17), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpTrusttime.setStatus('current')
mbgLtNgCfgNtpTimeScale = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("utc", 0), ("local", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpTimeScale.setStatus('current')
mbgLtNgCfgNtpEnableClientCounter = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 19), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpEnableClientCounter.setStatus('current')
mbgLtNgCfgNtpEnableClientCounterDuration = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpEnableClientCounterDuration.setStatus('current')
mbgLtNgCfgPtp = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4))
mbgLtNgCfgPtpTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1), )
if mibBuilder.loadTexts: mbgLtNgCfgPtpTable.setStatus('current')
mbgLtNgCfgPtpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpIndex"))
if mibBuilder.loadTexts: mbgLtNgCfgPtpTableEntry.setStatus('current')
mbgLtNgCfgPtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgCfgPtpIndex.setStatus('current')
mbgLtNgCfgPtpHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpHostname.setStatus('current')
mbgLtNgCfgPtpDomainname = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDomainname.setStatus('current')
mbgLtNgCfgPtpNameserver1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 4), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpNameserver1.setStatus('current')
mbgLtNgCfgPtpNameserver2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 5), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpNameserver2.setStatus('current')
mbgLtNgCfgPtpIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 6), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv4.setStatus('current')
mbgLtNgCfgPtpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 7), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpNetmask.setStatus('current')
mbgLtNgCfgPtpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 8), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpGateway.setStatus('current')
mbgLtNgCfgPtpEnableVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 9), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpEnableVlan.setStatus('current')
mbgLtNgCfgPtpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpVlanId.setStatus('current')
mbgLtNgCfgPtpVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpVlanPriority.setStatus('current')
mbgLtNgCfgPtpEnableDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 12), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpEnableDhcp.setStatus('current')
mbgLtNgCfgPtpIpv6Avail = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv6Avail.setStatus('current')
mbgLtNgCfgPtpIpv6Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("static", 0), ("ra", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv6Mode.setStatus('current')
mbgLtNgCfgPtpIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 25), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv6Address.setStatus('current')
mbgLtNgCfgPtpIpv6McastScope = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 14))).clone(namedValues=NamedValues(("intfLocal", 1), ("linkLocal", 2), ("realmLocal", 3), ("adminLocal", 4), ("siteLocal", 5), ("orgaLocal", 8), ("globalScope", 14))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv6McastScope.setStatus('current')
mbgLtNgCfgPtpDisableSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 27), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDisableSsh.setStatus('current')
mbgLtNgCfgPtpDscpClass = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDscpClass.setStatus('current')
mbgLtNgCfgPtpMcastTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpMcastTtl.setStatus('current')
mbgLtNgCfgPtpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("multicastSlave", 0), ("unicastSlave", 1), ("multicastMaster", 2), ("unicastMaster", 3), ("multicastAuto", 4), ("bothMaster", 5), ("ntpServer", 6), ("ntpClient", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpMode.setStatus('current')
mbgLtNgCfgPtpDelayMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("e2e", 0), ("p2p", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDelayMechanism.setStatus('current')
mbgLtNgCfgPtpNetworkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("reserved", 0), ("udpIpv4", 1), ("udpIpv6", 2), ("ieee8023", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpNetworkProtocol.setStatus('current')
mbgLtNgCfgPtpDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDomainNumber.setStatus('current')
mbgLtNgCfgPtpPriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpPriority1.setStatus('current')
mbgLtNgCfgPtpPriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpPriority2.setStatus('current')
mbgLtNgCfgPtpSyncInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-7, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncInterval.setStatus('current')
mbgLtNgCfgPtpAnnounceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-7, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpAnnounceInterval.setStatus('current')
mbgLtNgCfgPtpDelayReqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-7, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDelayReqInterval.setStatus('current')
mbgLtNgCfgPtpTimescale = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("arbitrary", 0), ("ptp", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpTimescale.setStatus('current')
mbgLtNgCfgPtpOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ptp", 0), ("ntp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpOpMode.setStatus('current')
mbgLtNgCfgPtpProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("custom", 0), ("defE2eIeee15882008", 1), ("defP2pIeee15882008", 2), ("powIeeeC37238", 3), ("telItuTG82651", 4), ("telItuTG82751", 5), ("smpteSt20592", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgPtpProfile.setStatus('current')
mbgLtNgCfgPtpHybridMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 32), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpHybridMode.setStatus('current')
mbgLtNgCfgPtpUcastMstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 33), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpUcastMstAddr.setStatus('current')
mbgLtNgCfgPtpAnnRcptTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpAnnRcptTmout.setStatus('current')
mbgLtNgCfgPtpMessageDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpMessageDuration.setStatus('current')
mbgLtNgCfgPtpSyncEAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 36), MeinbergSwitch()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEAvail.setStatus('current')
mbgLtNgCfgPtpSyncEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 37), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEEnabled.setStatus('current')
mbgLtNgCfgPtpSyncEQltLvlSelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 38), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEQltLvlSelEnable.setStatus('current')
mbgLtNgCfgPtpSyncESdhNwOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("opt1", 0), ("opt2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncESdhNwOption.setStatus('current')
mbgLtNgCfgPtpSyncEInputSsm = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("stuUkn", 0), ("prs", 1), ("prc", 2), ("inv3", 3), ("ssuATnc", 4), ("inv5", 5), ("inv6", 6), ("st2", 7), ("ssuB", 8), ("inv9", 9), ("eec2St3", 10), ("eec1Sec", 11), ("smc", 12), ("st3e", 13), ("prov", 14), ("dnuDus", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEInputSsm.setStatus('current')
mbgLtNgCfgPtpSyncEOutputSsm = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("stuUkn", 0), ("prs", 1), ("prc", 2), ("inv3", 3), ("ssuATnc", 4), ("inv5", 5), ("inv6", 6), ("st2", 7), ("ssuB", 8), ("inv9", 9), ("eec2St3", 10), ("eec1Sec", 11), ("smc", 12), ("st3e", 13), ("prov", 14), ("dnuDus", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEOutputSsm.setStatus('current')
mbgLtNgCfgPtpSyncEGbitCopperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 0), ("forceSyncEAuto", 1), ("forceOrIsMaster", 2), ("forceOrIsSlave", 3), ("preferMaster", 4), ("preferSlave", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEGbitCopperMode.setStatus('current')
mbgLtNgCfgPtpMiscEnable1Step = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 43), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpMiscEnable1Step.setStatus('current')
mbgLtNgCfgPtpDisableMgmtMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 44), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDisableMgmtMsgs.setStatus('current')
mbgLtNgCfgPtpOutput1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 0), ("pps", 1), ("mhz10", 2), ("khzGPS2048", 3), ("mhzGPS10", 4), ("ppsGPS", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpOutput1.setStatus('current')
mbgLtNgCfgPtpOutput2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 0), ("pps", 1), ("mhz10", 2), ("khzGPS2048", 3), ("mhzGPS10", 4), ("ppsGPS", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpOutput2.setStatus('current')
mbgLtNgCfgPtpCmd = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("configure", 1), ("reset", 2), ("apply", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpCmd.setStatus('current')
mbgLtNgCfgSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 5))
mbgLtNgCfgGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 5, 0))
mbgLtNgCfgWebLanguage = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 5, 0, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("englisch", 1), ("german", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgWebLanguage.setStatus('current')
mbgLtNgCfgActivateChangesAsStartup = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 5, 0, 2), MeinbergSwitch().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgActivateChangesAsStartup.setStatus('current')
mbgLtNgCfgDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 5, 1))
mbgLtNgCfgEnableFrontPanelLight = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 5, 1, 1), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEnableFrontPanelLight.setStatus('current')
mbgLtNgCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 2))
mbgLtNgCmdExecute = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("applyChanges", 1), ("saveChanges", 2), ("saveAndApplyChanges", 3), ("startFirmwareUpdate", 4), ("reboot", 5), ("resendErrorConditions", 6), ("sendTestNotifications", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCmdExecute.setStatus('current')
mbgLtNgCmdSetTime = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 2, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCmdSetTime.setStatus('current')
mbgLtNgTrapNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 3))
mbgLtNgTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0))
mbgLtNgTrapNTPNotSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 1)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapNTPNotSync.setStatus('current')
mbgLtNgTrapNTPStopped = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 2)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapNTPStopped.setStatus('current')
mbgLtNgTrapServerBoot = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 3)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapServerBoot.setStatus('current')
mbgLtNgTrapReceiverNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 4)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapReceiverNotResponding.setStatus('current')
mbgLtNgTrapReceiverNotSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 5)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapReceiverNotSync.setStatus('current')
mbgLtNgTrapAntennaFaulty = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 6)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapAntennaFaulty.setStatus('current')
mbgLtNgTrapAntennaReconnect = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 7)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapAntennaReconnect.setStatus('current')
mbgLtNgTrapConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 8)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapConfigChanged.setStatus('current')
mbgLtNgTrapLeapSecondAnnounced = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 9)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapLeapSecondAnnounced.setStatus('current')
mbgLtNgTrapSHSTimeLimitError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 10)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapSHSTimeLimitError.setStatus('current')
mbgLtNgTrapSecondaryRecNotSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 11)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapSecondaryRecNotSync.setStatus('current')
mbgLtNgTrapPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 12)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapPowerSupplyFailure.setStatus('current')
mbgLtNgTrapAntennaShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 13)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapAntennaShortCircuit.setStatus('current')
mbgLtNgTrapReceiverSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 14)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapReceiverSync.setStatus('current')
mbgLtNgTrapNTPClientAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 15)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapNTPClientAlarm.setStatus('current')
mbgLtNgTrapPowerSupplyUp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 16)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapPowerSupplyUp.setStatus('current')
mbgLtNgTrapNetworkDown = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 17)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapNetworkDown.setStatus('current')
mbgLtNgTrapNetworkUp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 18)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapNetworkUp.setStatus('current')
mbgLtNgTrapSecondaryRecNotResp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 19)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapSecondaryRecNotResp.setStatus('current')
mbgLtNgTrapXmrLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 30)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapXmrLimitExceeded.setStatus('current')
mbgLtNgTrapXmrRefDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 31)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapXmrRefDisconnect.setStatus('current')
mbgLtNgTrapXmrRefReconnect = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 32)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapXmrRefReconnect.setStatus('current')
mbgLtNgTrapFdmError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 33)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapFdmError.setStatus('current')
mbgLtNgTrapSHSTimeLimitWarning = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 34)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapSHSTimeLimitWarning.setStatus('current')
mbgLtNgTrapSecondaryRecSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 35)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapSecondaryRecSync.setStatus('current')
mbgLtNgTrapNTPSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 36)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapNTPSync.setStatus('current')
mbgLtNgTrapPtpPortDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 37)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapPtpPortDisconnected.setStatus('current')
mbgLtNgTrapPtpPortConnected = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 38)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapPtpPortConnected.setStatus('current')
mbgLtNgTrapPtpStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 39)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapPtpStateChanged.setStatus('current')
mbgLtNgTrapPtpError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 40)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapPtpError.setStatus('current')
mbgLtNgTrapLowSystemResources = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 41)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapLowSystemResources.setStatus('current')
mbgLtNgTrapFanDown = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 45)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapFanDown.setStatus('current')
mbgLtNgTrapFanUp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 46)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapFanUp.setStatus('current')
mbgLtNgTrapCertificateExpired = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 47)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapCertificateExpired.setStatus('current')
mbgLtNgTrapSufficientSystemResources = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 48)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapSufficientSystemResources.setStatus('current')
mbgLtNgTrapOscillatorWarmedUp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 49)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapOscillatorWarmedUp.setStatus('current')
mbgLtNgTrapOscillatorNotWarmedUp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 50)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapOscillatorNotWarmedUp.setStatus('current')
mbgLtNgTrapXmrRefChanged = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 51)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapXmrRefChanged.setStatus('current')
mbgLtNgTrapClusterMasterChanged = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 52)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapClusterMasterChanged.setStatus('current')
mbgLtNgTrapClusterFalsetickerDetected = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 53)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapClusterFalsetickerDetected.setStatus('current')
mbgLtNgTrapClusterFalsetickerCleared = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 54)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapClusterFalsetickerCleared.setStatus('current')
mbgLtNgTrapSHSTimeLimitOk = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 55)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapSHSTimeLimitOk.setStatus('current')
mbgLtNgTrapIMSError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 56)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapIMSError.setStatus('current')
mbgLtNgTrapIMSOk = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 57)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapIMSOk.setStatus('current')
mbgLtNgTrapFDMOk = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 58)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapFDMOk.setStatus('current')
mbgLtNgTrapNTPOffsetLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 59)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapNTPOffsetLimitExceeded.setStatus('current')
mbgLtNgTrapNTPOffsetLimitOk = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 60)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapNTPOffsetLimitOk.setStatus('current')
mbgLtNgTrapXheRubOk = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 61)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapXheRubOk.setStatus('current')
mbgLtNgTrapXheRubError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 62)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapXheRubError.setStatus('current')
mbgLtNgTrapPowerConsumptionExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 63)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapPowerConsumptionExceeded.setStatus('current')
mbgLtNgTrapPowerConsumptionOk = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 64)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapPowerConsumptionOk.setStatus('current')
mbgLtNgTrapPowerRedundancyNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 65)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapPowerRedundancyNotAvail.setStatus('current')
mbgLtNgTrapPowerRedundancyAvail = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 66)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapPowerRedundancyAvail.setStatus('current')
mbgLtNgTrapTrustedSourceError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 67)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapTrustedSourceError.setStatus('current')
mbgLtNgTrapTrustedSourceOk = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 68)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapTrustedSourceOk.setStatus('current')
mbgLtNgTrapNormalOperation = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 77)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapNormalOperation.setStatus('current')
mbgLtNgTrapHeartbeat = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 88)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapHeartbeat.setStatus('current')
mbgLtNgTrapTestNotification = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 99)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("SNMPv2-MIB", "snmpTrapEnterprise"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: mbgLtNgTrapTestNotification.setStatus('current')
mbgLtNgTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 100), DisplayString().clone('no event')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgTrapMessage.setStatus('current')
mbgLtNgConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 90))
mbgLtNgCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 90, 1))
mbgLtNgGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 90, 2))
mbgLtNgCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5597, 30, 90, 1, 1)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgObjectsGroup"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbgLtNgCompliance = mbgLtNgCompliance.setStatus('current')
mbgLtNgObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5597, 30, 90, 2, 1))
for _mbgLtNgObjectsGroup_obj in [[("MBG-SNMP-LTNG-MIB", "mbgLtNgSnmpSubagentVersion"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgFirmwareVersion"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSerialNumber"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSubagentTimeticks"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCpuSerialNumber"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCurrentState"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpStratum"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpRefclockName"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpRefclockOffset"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpVersion"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCStartedAt"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCDuration"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCNumberOfClients"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCTotalRequests"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCTotalRequestsLastHour"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCTotalRequestsLastMinute"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCTotalRequestsCurrentDay"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCTodaysClients"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpMrsServer"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpMrsOffset"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNumberOfRefclocks"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockType"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockUsage"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockState"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockSubstate"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockStatusA"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockMaxStatusA"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockStatusB"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockMaxStatusB"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockAdditionalInfo"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockLeapSecondDate"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsLatitude"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsLongitude"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsTdop"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsPdop"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsUtcOffset"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsAltitude"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockTimeDiff"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsPos"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNumberOfClusters"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterCommunicationIp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterPortState"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterMasterSerial"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterMasterIp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterMasterPriority"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterClockStatus"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterClockClass"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterReconfigurationState"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterIsFalseticker"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpServerIP"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpServerKey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpServerAutokey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpServerMinpoll"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpServerMaxpoll"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpServerIburst"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpBroadAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpBroadInterval"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpBroadSymKey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpBroadUseAutokey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpEnableMulticast"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpMultiAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpMultiInterval"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpMultiSymKey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpMultiUseAutokey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpEnableManycast"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpManyAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpManySymKey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpManyUseAutokey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpLocalTrustedKeys"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpTrusttime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpTimeScale"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpLocalClkStratum"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpDisableLocalClk"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpSpoofLocalTime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpEnableClientCounter"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpEnableClientCounterDuration"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpHostname"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDomainname"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpNameserver1"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpNameserver2"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpIpv4"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpNetmask"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpGateway"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpEnableVlan"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpVlanId"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpVlanPriority"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpEnableDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpIpv6Avail"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpIpv6Mode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpIpv6Address"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpIpv6McastScope"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDisableSsh"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDscpClass"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpMcastTtl"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpOpMode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpMode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpHybridMode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpUcastMstAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpProfile"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDelayMechanism"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpNetworkProtocol"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDomainNumber"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpPriority1"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpPriority2"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncInterval"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpAnnounceInterval"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDelayReqInterval"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpTimescale"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpAnnRcptTmout"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpMessageDuration"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpCmd"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncEAvail"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncEEnabled"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncEQltLvlSelEnable"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncESdhNwOption"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncEInputSsm"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncEOutputSsm"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncEGbitCopperMode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpMiscEnable1Step"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDisableMgmtMsgs"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpOutput1"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpOutput2"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailTo"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgEthPortLinkState"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailFrom"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailSmarthostAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailSmarthostPort"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailSmarthostAuth"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailSmarthostAuthUser"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailSmarthostAuthPw"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpContact"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpLocation"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVP100Display1Addr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVP100Display1SN"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVP100Display2Addr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVP100Display2SN"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetHostname"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetDomain"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetNameserver1"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetNameserver2"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetIpv4Gateway"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetIpv6Gateway"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNumberOfPhysicalIf"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNumberOfVirtualIf"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPhysicalIfMac"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPhysicalIfNetLinkMode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPhysicalIfIndicateLink"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPhysicalIfBondingGroup"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPhysicalIfIpv6Mode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4AddrFromDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4NetmaskFromDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4BroadcastFromDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4GatewayFromDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4DnsFromDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4DomainFromDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfAssigned"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfMac"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfLabel"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceNtp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceHttp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceHttps"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceTelnet"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceSsh"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceSnmp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceFtp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceTime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceDaytime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceFpc"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4Addr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4Netmask"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4Dhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv6Addr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv6Dhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv6RoutAdd"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv6LinkLocal"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfVlan"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfVlanTag"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfVlanPrio"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfCluster"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfClusterIpv4Addr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfClusterIpv4Netmask"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfClusterPrio"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetGenClusterIp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetGenClusterPort"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSyslogServerAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSyslogLoglevel"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgWmailAddress1"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgWmailAddress2"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpTrapRecAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpTrapRecCommunity"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpTrapRecVersion"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpReadCommunity"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpWriteCommunity"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3UserName"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3UserRights"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3Context"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3SecurityLevel"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3AuthProtocol"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3AuthPassphrase"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3PrivProtocol"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3PrivPassphrase"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpRetries"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpTimeout"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpEnabledVersion"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpMaxClientOffset"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpMaxClientStratum"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNormalOperation"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNtpNotSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNtpSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNtpStopped"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapServerBoot"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapRefclockNotResponding"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapRefclockSynchronized"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapRefclockNotSynchronized"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapSecRefclockNotResponding"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapSecRefclockSynchronized"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapSecRefclockNotSynchronized"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapAntennaFaulty"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapAntennaReconnect"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapAntennaShortCircuit"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapConfigChanged"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapLeapSecAnnounced"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNtpClientLimitExceeded"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapRefSrcDisconnected"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapRefSrcReconnected"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapShsTimeLimitError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapShsTimeLimitWarning"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNetworkDown"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNetworkUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapPowerSupplyUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapPowerSupplyDown"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapFdmError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapLowSystemResources"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapPtpNetworkDown"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapPtpNetworkUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapPtpStateChanged"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapPtpError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapRefSrcLimitExceeded"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapFanDown"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapFanUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgRepeatEvent"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgRepetitions"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapWarmedUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNotWarmedUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgDisableRootLogin"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgDisableUsbPort"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgAllowNetworkDiscovery"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgLockFrontPanel"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSshKeyLength"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSshShellTimeout"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgWebLanguage"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgActivateChangesAsStartup"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEnableFrontPanelLight"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCmdExecute")], [("MBG-SNMP-LTNG-MIB", "mbgLtNgCmdSetTime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgFdmFreq"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgFdmFreqDev"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgFdmNomFreq"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpNumberOfModules"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpMode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpPortState"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpLocalMac"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpGrandmasterMac"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpGrandmasterUuid"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpClockAccuracy"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpClockClass"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpTimeSource"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpUtcOffset"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpTimeSeconds"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpTsuTime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpSysTime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpPortLinkup"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpOffsetFromGM"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpPathDelay"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpDelayMec"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpDomain"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpDelayAsymmetry"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpAvail"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSysNumberOfPowerSupplies"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSysPsStatus"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSysNumberOfFans"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSysFanStatus"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSysFanError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSysTempCelsius")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        mbgLtNgObjectsGroup = mbgLtNgObjectsGroup.setObjects(*_mbgLtNgObjectsGroup_obj)
    else:
        mbgLtNgObjectsGroup = mbgLtNgObjectsGroup.setObjects(*_mbgLtNgObjectsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbgLtNgObjectsGroup = mbgLtNgObjectsGroup.setStatus('current')
mbgLtNgTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5597, 30, 90, 2, 2)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNTPNotSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNTPStopped"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapServerBoot"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapReceiverNotResponding"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapReceiverNotSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapAntennaFaulty"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapAntennaReconnect"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapConfigChanged"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapLeapSecondAnnounced"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSHSTimeLimitError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSecondaryRecNotSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPowerSupplyFailure"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapAntennaShortCircuit"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapReceiverSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNTPClientAlarm"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPowerSupplyUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNetworkDown"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNetworkUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSecondaryRecNotResp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapXmrLimitExceeded"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapXmrRefDisconnect"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapXmrRefReconnect"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapFdmError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSHSTimeLimitWarning"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSecondaryRecSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNTPSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNormalOperation"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapHeartbeat"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapTestNotification"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPtpPortDisconnected"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPtpPortConnected"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPtpStateChanged"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPtpError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapLowSystemResources"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSufficientSystemResources"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapFanDown"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapFanUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapCertificateExpired"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapOscillatorWarmedUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapOscillatorNotWarmedUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapXmrRefChanged"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapClusterMasterChanged"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapClusterFalsetickerDetected"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapClusterFalsetickerCleared"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSHSTimeLimitOk"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapIMSError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapIMSOk"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapFDMOk"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNTPOffsetLimitExceeded"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNTPOffsetLimitOk"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapXheRubOk"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapXheRubError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPowerConsumptionExceeded"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPowerConsumptionOk"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPowerRedundancyNotAvail"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPowerRedundancyAvail"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapTrustedSourceError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapTrustedSourceOk"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbgLtNgTrapsGroup = mbgLtNgTrapsGroup.setStatus('current')
mibBuilder.exportSymbols("MBG-SNMP-LTNG-MIB", mbgLtNgCfgActivateChangesAsStartup=mbgLtNgCfgActivateChangesAsStartup, mbgLtNgPtpUtcOffset=mbgLtNgPtpUtcOffset, mbgLtNgCfgVirtualIfServiceFtp=mbgLtNgCfgVirtualIfServiceFtp, mbgLtNgCfgPtpEnableDhcp=mbgLtNgCfgPtpEnableDhcp, mbgLtNgPtpPathDelay=mbgLtNgPtpPathDelay, mbgLtNgCfgNtpBroadAddr=mbgLtNgCfgNtpBroadAddr, mbgLtNgClusterIndex=mbgLtNgClusterIndex, mbgLtNgNtpCCTotalRequestsLastMinute=mbgLtNgNtpCCTotalRequestsLastMinute, mbgLtNgCfgNtpManyUseAutokey=mbgLtNgCfgNtpManyUseAutokey, mbgLtNgTrapPowerRedundancyAvail=mbgLtNgTrapPowerRedundancyAvail, mbgLtNgCfgEthernetDomain=mbgLtNgCfgEthernetDomain, mbgLtNgCfgVirtualIfServiceSnmp=mbgLtNgCfgVirtualIfServiceSnmp, mbgLtNgCfgPtpDisableMgmtMsgs=mbgLtNgCfgPtpDisableMgmtMsgs, mbgLtNgCfgNtpEnableMulticast=mbgLtNgCfgNtpEnableMulticast, mbgLtNgCfgTrapRefclockSynchronized=mbgLtNgCfgTrapRefclockSynchronized, mbgLtNgCompliance=mbgLtNgCompliance, mbgLtNgCfgNtpBMIndex=mbgLtNgCfgNtpBMIndex, mbgLtNgCfgTrapPowerSupplyDown=mbgLtNgCfgTrapPowerSupplyDown, mbgLtNgCfgPtpMiscEnable1Step=mbgLtNgCfgPtpMiscEnable1Step, mbgLtNgPtpNumberOfModules=mbgLtNgPtpNumberOfModules, mbgLtNgRefclockGpsUtcOffset=mbgLtNgRefclockGpsUtcOffset, mbgLtNgCfgPtpSyncEGbitCopperMode=mbgLtNgCfgPtpSyncEGbitCopperMode, mbgLtNgNtpCCTotalRequestsLastHour=mbgLtNgNtpCCTotalRequestsLastHour, mbgLtNgCfgSnmpTrapRecTableEntry=mbgLtNgCfgSnmpTrapRecTableEntry, mbgLtNgSnmpSubagentVersion=mbgLtNgSnmpSubagentVersion, mbgLtNgCfgEmail=mbgLtNgCfgEmail, mbgLtNgTrapNetworkDown=mbgLtNgTrapNetworkDown, mbgLtNgCfgSnmpRetries=mbgLtNgCfgSnmpRetries, mbgLtNgCfgVirtualIfServiceNtp=mbgLtNgCfgVirtualIfServiceNtp, mbgLtNgPtpDelayMec=mbgLtNgPtpDelayMec, mbgLtNgNtp=mbgLtNgNtp, mbgLtNgCfgSnmpV3UserRights=mbgLtNgCfgSnmpV3UserRights, mbgLtNgCfgEthernetHostname=mbgLtNgCfgEthernetHostname, mbgLtNgCfgPtpProfile=mbgLtNgCfgPtpProfile, mbgLtNgNtpRefclockOffset=mbgLtNgNtpRefclockOffset, mbgLtNgCfgVirtualIfMac=mbgLtNgCfgVirtualIfMac, mbgLtNgCfgSnmpTimeout=mbgLtNgCfgSnmpTimeout, mbgLtNgCfgDisableRootLogin=mbgLtNgCfgDisableRootLogin, mbgLtNgTrapXmrRefReconnect=mbgLtNgTrapXmrRefReconnect, mbgLtNgCfgPtpPriority2=mbgLtNgCfgPtpPriority2, mbgLtNgCfgVirtualIfServiceFpc=mbgLtNgCfgVirtualIfServiceFpc, mbgLtNgCfgPtpSyncEOutputSsm=mbgLtNgCfgPtpSyncEOutputSsm, mbgLtNgCfgTrapNetworkDown=mbgLtNgCfgTrapNetworkDown, mbgLtNgCfgTrapNtpClientLimitExceeded=mbgLtNgCfgTrapNtpClientLimitExceeded, mbgLtNgCfgVirtualIfServiceDaytime=mbgLtNgCfgVirtualIfServiceDaytime, mbgLtNgPtpGrandmasterUuid=mbgLtNgPtpGrandmasterUuid, mbgLtNgSysFanTableEntry=mbgLtNgSysFanTableEntry, mbgLtNgCfgVP100Display1SN=mbgLtNgCfgVP100Display1SN, mbgLtNgCfgPtpVlanPriority=mbgLtNgCfgPtpVlanPriority, mbgLtNgTrapConfigChanged=mbgLtNgTrapConfigChanged, mbgLtNgCfgPtpAnnounceInterval=mbgLtNgCfgPtpAnnounceInterval, mbgLtNgTrapNetworkUp=mbgLtNgTrapNetworkUp, mbgLtNgTrapXheRubOk=mbgLtNgTrapXheRubOk, mbgLtNgCfgNotifications=mbgLtNgCfgNotifications, mbgLtNgCfgTrapPowerSupplyUp=mbgLtNgCfgTrapPowerSupplyUp, mbgLtNgSysPsStatus=mbgLtNgSysPsStatus, mbgLtNgCfgSyslogServerAddr=mbgLtNgCfgSyslogServerAddr, mbgLtNgCfgSnmpTrapRecTable=mbgLtNgCfgSnmpTrapRecTable, mbgLtNgCfgNtpTable=mbgLtNgCfgNtpTable, mbgLtNgCfgVirtualIfClusterIpv4Netmask=mbgLtNgCfgVirtualIfClusterIpv4Netmask, mbgLtNgCfgVirtualIfVlanPrio=mbgLtNgCfgVirtualIfVlanPrio, mbgLtNgCfgTrapTrigger=mbgLtNgCfgTrapTrigger, mbgLtNgCfgVirtualIfTable=mbgLtNgCfgVirtualIfTable, mbgLtNgCfgPtpDisableSsh=mbgLtNgCfgPtpDisableSsh, mbgLtNgPtpSysTime=mbgLtNgPtpSysTime, mbgLtNgSerialNumber=mbgLtNgSerialNumber, mbgLtNgCfgPtpTimescale=mbgLtNgCfgPtpTimescale, mbgLtNgCfgNtpServerIP=mbgLtNgCfgNtpServerIP, mbgLtNgNtpRefclockName=mbgLtNgNtpRefclockName, mbgLtNgPtpLocalMac=mbgLtNgPtpLocalMac, mbgLtNgCfgPtpIpv6Mode=mbgLtNgCfgPtpIpv6Mode, mbgLtNgNtpClientCounter=mbgLtNgNtpClientCounter, mbgLtNgCfgRepeatEvent=mbgLtNgCfgRepeatEvent, mbgLtNgCfgSnmpV3PrivPassphrase=mbgLtNgCfgSnmpV3PrivPassphrase, mbgLtNgFdmNomFreq=mbgLtNgFdmNomFreq, mbgLtNgTrapNTPClientAlarm=mbgLtNgTrapNTPClientAlarm, mbgLtNgCfgPtpHybridMode=mbgLtNgCfgPtpHybridMode, mbgLtNgTrapSHSTimeLimitError=mbgLtNgTrapSHSTimeLimitError, mbgLtNgCfgSnmpV3UserName=mbgLtNgCfgSnmpV3UserName, mbgLtNgPtpClockAccuracy=mbgLtNgPtpClockAccuracy, mbgLtNgCompliances=mbgLtNgCompliances, mbgLtNgTrapPowerConsumptionExceeded=mbgLtNgTrapPowerConsumptionExceeded, mbgLtNgCfgTrapLowSystemResources=mbgLtNgCfgTrapLowSystemResources, mbgLtNgRefclockStatusB=mbgLtNgRefclockStatusB, mbgLtNgCfgTrapServerBoot=mbgLtNgCfgTrapServerBoot, mbgLtNgTrapSHSTimeLimitWarning=mbgLtNgTrapSHSTimeLimitWarning, mbgLtNgNtpMrs=mbgLtNgNtpMrs, mbgLtNgCfgTrapSecRefclockNotSynchronized=mbgLtNgCfgTrapSecRefclockNotSynchronized, mbgLtNgCfgVirtualIfClusterPrio=mbgLtNgCfgVirtualIfClusterPrio, mbgLantimeNG=mbgLantimeNG, mbgLantimeNGStatus=mbgLantimeNGStatus, mbgLtNgCfgNtpBroadUseAutokey=mbgLtNgCfgNtpBroadUseAutokey, mbgLtNgCfgPtpTableEntry=mbgLtNgCfgPtpTableEntry, mbgLtNgRefclockGpsTdop=mbgLtNgRefclockGpsTdop, mbgLtNgNumberOfRefclocks=mbgLtNgNumberOfRefclocks, mbgLtNgPtpTimeSeconds=mbgLtNgPtpTimeSeconds, mbgLtNgCfgSyslog=mbgLtNgCfgSyslog, mbgLtNgCfgVirtualIfIpv6Addr=mbgLtNgCfgVirtualIfIpv6Addr, mbgLtNgCfgVP100Display2SN=mbgLtNgCfgVP100Display2SN, mbgLtNgCfgTrapFanDown=mbgLtNgCfgTrapFanDown, mbgLtNgSubagentTimeticks=mbgLtNgSubagentTimeticks, mbgLtNgCfgVirtualIfVlanTag=mbgLtNgCfgVirtualIfVlanTag, mbgLtNgNtpCCTotalRequests=mbgLtNgNtpCCTotalRequests, mbgLtNgCfgTrapAntennaShortCircuit=mbgLtNgCfgTrapAntennaShortCircuit, mbgLtNgPtpPortState=mbgLtNgPtpPortState, mbgLtNgCfgTrapFdmError=mbgLtNgCfgTrapFdmError, mbgLtNgCfgSnmpContact=mbgLtNgCfgSnmpContact, mbgLtNgSysTemperature=mbgLtNgSysTemperature, mbgLtNgRefclockMaxStatusA=mbgLtNgRefclockMaxStatusA, mbgLtNgSysPsTableEntry=mbgLtNgSysPsTableEntry, mbgLtNgCfgNtpTrusttime=mbgLtNgCfgNtpTrusttime, mbgLtNgCfgTrapRefclockNotResponding=mbgLtNgCfgTrapRefclockNotResponding, mbgLtNgCfgGeneral=mbgLtNgCfgGeneral, mbgLtNgCfgSnmpTrapRecAddr=mbgLtNgCfgSnmpTrapRecAddr, mbgLtNgClusterClockStatus=mbgLtNgClusterClockStatus, mbgLtNgCfgSnmpReadCommunity=mbgLtNgCfgSnmpReadCommunity, mbgLtNgNtpStratum=mbgLtNgNtpStratum, mbgLtNgCfgVirtualIfServiceTelnet=mbgLtNgCfgVirtualIfServiceTelnet, mbgLtNgTrapNTPOffsetLimitExceeded=mbgLtNgTrapNTPOffsetLimitExceeded, mbgLtNgCfgNtpMultiUseAutokey=mbgLtNgCfgNtpMultiUseAutokey, mbgLtNgFdmFreqDev=mbgLtNgFdmFreqDev, mbgLtNgCfgPtpUcastMstAddr=mbgLtNgCfgPtpUcastMstAddr, mbgLtNgCfgTrapPtpStateChanged=mbgLtNgCfgTrapPtpStateChanged, mbgLtNgCfgPtpDelayMechanism=mbgLtNgCfgPtpDelayMechanism, mbgLtNgCfgNtpEnableManycast=mbgLtNgCfgNtpEnableManycast, mbgLtNgFdm=mbgLtNgFdm, mbgLtNgCfgEthernetNameserver1=mbgLtNgCfgEthernetNameserver1, mbgLtNgPtpClockClass=mbgLtNgPtpClockClass, mbgLtNgCfgSnmpTrapRecIndex=mbgLtNgCfgSnmpTrapRecIndex, mbgLtNgPtpTableEntry=mbgLtNgPtpTableEntry, mbgLtNgTrapPowerRedundancyNotAvail=mbgLtNgTrapPowerRedundancyNotAvail, mbgLtNgCfgTrapPtpError=mbgLtNgCfgTrapPtpError, PYSNMP_MODULE_ID=mbgLantimeNG, mbgLtNgPtp=mbgLtNgPtp, mbgLtNgCfgNtpDisableLocalClk=mbgLtNgCfgNtpDisableLocalClk, mbgLtNgCfgSnmpV3Context=mbgLtNgCfgSnmpV3Context, mbgLtNgCfgNtpBroadInterval=mbgLtNgCfgNtpBroadInterval, mbgLtNgCfgPtpGateway=mbgLtNgCfgPtpGateway, mbgLtNgCfgPtpIpv6Address=mbgLtNgCfgPtpIpv6Address, mbgLtNgNumberOfClusters=mbgLtNgNumberOfClusters, mbgLtNgCpuSerialNumber=mbgLtNgCpuSerialNumber, mbgLtNgRefclockAdditionalInfo=mbgLtNgRefclockAdditionalInfo, mbgLtNgCfgNtpMaxClientOffset=mbgLtNgCfgNtpMaxClientOffset, mbgLtNgSysPowerSupply=mbgLtNgSysPowerSupply, mbgLtNgTrapPtpPortConnected=mbgLtNgTrapPtpPortConnected, mbgLtNgTrapPtpError=mbgLtNgTrapPtpError, mbgLtNgMisc=mbgLtNgMisc, mbgLtNgTrapClusterFalsetickerDetected=mbgLtNgTrapClusterFalsetickerDetected, mbgLtNgCfgSnmpLocation=mbgLtNgCfgSnmpLocation, mbgLtNgClusterTable=mbgLtNgClusterTable, mbgLtNgTrapFdmError=mbgLtNgTrapFdmError, mbgLtNgCfgTrapSecRefclockNotResponding=mbgLtNgCfgTrapSecRefclockNotResponding, mbgLtNgCfgPtpCmd=mbgLtNgCfgPtpCmd, mbgLtNgCfgNtpMaxClientStratum=mbgLtNgCfgNtpMaxClientStratum, mbgLtNgCfgWmailAddress2=mbgLtNgCfgWmailAddress2, mbgLtNgCfgNtpEnableClientCounter=mbgLtNgCfgNtpEnableClientCounter, mbgLtNgTrapOscillatorNotWarmedUp=mbgLtNgTrapOscillatorNotWarmedUp, mbgLtNgCfgNtpEnableClientCounterDuration=mbgLtNgCfgNtpEnableClientCounterDuration, mbgLtNgRefclockIndex=mbgLtNgRefclockIndex, mbgLtNgNtpCCTodaysClients=mbgLtNgNtpCCTodaysClients, mbgLtNgCfgDisableUsbPort=mbgLtNgCfgDisableUsbPort, mbgLtNgRefclockMaxStatusB=mbgLtNgRefclockMaxStatusB, mbgLtNgCfgVirtualIfVlan=mbgLtNgCfgVirtualIfVlan, mbgLtNgTrapTrustedSourceOk=mbgLtNgTrapTrustedSourceOk, mbgLtNgEthPortLinkState=mbgLtNgEthPortLinkState, mbgLtNgCfgVirtualIfServiceHttp=mbgLtNgCfgVirtualIfServiceHttp, mbgLtNgCfgNtpLocalTrustedKeys=mbgLtNgCfgNtpLocalTrustedKeys, mbgLtNgCfgVirtualIfClusterIpv4Addr=mbgLtNgCfgVirtualIfClusterIpv4Addr, mbgLtNgCfgNtpManySymKey=mbgLtNgCfgNtpManySymKey, mbgLtNgTrapClusterFalsetickerCleared=mbgLtNgTrapClusterFalsetickerCleared, mbgLtNgTrapClusterMasterChanged=mbgLtNgTrapClusterMasterChanged, mbgLtNgCfgTrapSecRefclockSynchronized=mbgLtNgCfgTrapSecRefclockSynchronized, mbgLtNgCfgTrapConfigChanged=mbgLtNgCfgTrapConfigChanged, mbgLtNgClusterMasterIp=mbgLtNgClusterMasterIp, mbgLtNgCfgSecurity=mbgLtNgCfgSecurity, mbgLtNgRefclockGpsIndex=mbgLtNgRefclockGpsIndex, mbgLtNgPtpOffsetFromGM=mbgLtNgPtpOffsetFromGM, mbgLtNgCmdExecute=mbgLtNgCmdExecute, mbgLtNgCfgVirtualIfIpv4Netmask=mbgLtNgCfgVirtualIfIpv4Netmask, mbgLtNgCfgNumberOfVirtualIf=mbgLtNgCfgNumberOfVirtualIf, mbgLtNgCfgNtpManyAddr=mbgLtNgCfgNtpManyAddr, mbgLtNgCfgPtpSyncEInputSsm=mbgLtNgCfgPtpSyncEInputSsm, mbgLtNgTrapAntennaReconnect=mbgLtNgTrapAntennaReconnect, mbgLtNgCfgNtpSpoofLocalTime=mbgLtNgCfgNtpSpoofLocalTime, mbgLtNgCfgPtpDomainNumber=mbgLtNgCfgPtpDomainNumber, mbgLtNgCfgVirtualIfServiceTime=mbgLtNgCfgVirtualIfServiceTime, mbgLtNgPtpDelayAsymmetry=mbgLtNgPtpDelayAsymmetry, mbgLtNgCluster=mbgLtNgCluster, mbgLtNgCfgTrapNotWarmedUp=mbgLtNgCfgTrapNotWarmedUp, mbgLtNgCfgEmailSmarthostAddr=mbgLtNgCfgEmailSmarthostAddr, mbgLtNgClusterTableEntry=mbgLtNgClusterTableEntry, mbgLtNgTrapNTPOffsetLimitOk=mbgLtNgTrapNTPOffsetLimitOk, mbgLtNgRefclock=mbgLtNgRefclock, mbgLtNgCfgEthernetNameserver2=mbgLtNgCfgEthernetNameserver2, mbgLtNgCfgVirtualIfIpv4GatewayFromDhcp=mbgLtNgCfgVirtualIfIpv4GatewayFromDhcp, mbgLtNgCfgVirtualIfIpv6LinkLocal=mbgLtNgCfgVirtualIfIpv6LinkLocal, mbgLtNgCfgPtpNameserver1=mbgLtNgCfgPtpNameserver1, mbgLtNgCfgEthernetGenClusterPort=mbgLtNgCfgEthernetGenClusterPort, mbgLtNgTrapSecondaryRecNotSync=mbgLtNgTrapSecondaryRecNotSync, mbgLtNgCfgPtpOutput1=mbgLtNgCfgPtpOutput1, mbgLtNgTrapTestNotification=mbgLtNgTrapTestNotification, mbgLtNgPtpAvail=mbgLtNgPtpAvail, mbgLtNgTrapNormalOperation=mbgLtNgTrapNormalOperation, mbgLtNgCfgNtpBroadSymKey=mbgLtNgCfgNtpBroadSymKey, mbgLtNgCfgVirtualIfServiceHttps=mbgLtNgCfgVirtualIfServiceHttps, mbgLtNgCfgVirtualIfIpv4NetmaskFromDhcp=mbgLtNgCfgVirtualIfIpv4NetmaskFromDhcp, mbgLtNgSysFanStatus=mbgLtNgSysFanStatus, mbgLtNgTrapAntennaShortCircuit=mbgLtNgTrapAntennaShortCircuit, mbgLtNgSystemHardware=mbgLtNgSystemHardware, mbgLtNgTrapLowSystemResources=mbgLtNgTrapLowSystemResources, mbgLtNgCfgSnmpV3PrivProtocol=mbgLtNgCfgSnmpV3PrivProtocol, mbgLtNgTrapOscillatorWarmedUp=mbgLtNgTrapOscillatorWarmedUp, mbgLtNgNtpCCTotalRequestsCurrentDay=mbgLtNgNtpCCTotalRequestsCurrentDay, mbgLtNgTrapMessage=mbgLtNgTrapMessage, mbgLtNgClusterIsFalseticker=mbgLtNgClusterIsFalseticker, mbgLtNgCommands=mbgLtNgCommands, mbgLtNgRefclockType=mbgLtNgRefclockType, mbgLtNgFirmwareVersion=mbgLtNgFirmwareVersion, mbgLtNgCfgTrapAntennaFaulty=mbgLtNgCfgTrapAntennaFaulty, mbgLtNgCfgPhysicalIfIndicateLink=mbgLtNgCfgPhysicalIfIndicateLink, mbgLtNgCfgPhysicalIfBondingGroup=mbgLtNgCfgPhysicalIfBondingGroup, mbgLtNgCfgPtpNetmask=mbgLtNgCfgPtpNetmask, mbgLtNgCfgPtpTable=mbgLtNgCfgPtpTable, mbgLtNgPtpTable=mbgLtNgPtpTable, mbgLtNgEthPortLinkTableEntry=mbgLtNgEthPortLinkTableEntry, mbgLtNgCfgVirtualIfIpv6Dhcp=mbgLtNgCfgVirtualIfIpv6Dhcp, mbgLtNgCfgPhysicalIfMac=mbgLtNgCfgPhysicalIfMac, mbgLtNgTrapNTPStopped=mbgLtNgTrapNTPStopped, mbgLtNgCfgSnmpTrapRecVersion=mbgLtNgCfgSnmpTrapRecVersion, mbgLtNgCfgTrapShsTimeLimitWarning=mbgLtNgCfgTrapShsTimeLimitWarning, mbgLtNgTrapServerBoot=mbgLtNgTrapServerBoot, mbgLtNgCfgEmailFrom=mbgLtNgCfgEmailFrom, mbgLtNgRefclockGpsPdop=mbgLtNgRefclockGpsPdop, mbgLtNgConformance=mbgLtNgConformance, mbgLtNgTrapCertificateExpired=mbgLtNgTrapCertificateExpired, mbgLtNgCfgPtpEnableVlan=mbgLtNgCfgPtpEnableVlan, mbgLtNgCfgNtpServerMaxpoll=mbgLtNgCfgNtpServerMaxpoll, mbgLtNgPtpMode=mbgLtNgPtpMode, mbgLtNgCfgEnableFrontPanelLight=mbgLtNgCfgEnableFrontPanelLight, mbgLtNgCfgEmailSmarthostAuthUser=mbgLtNgCfgEmailSmarthostAuthUser, mbgLtNgTrapAntennaFaulty=mbgLtNgTrapAntennaFaulty, mbgLtNgCfgPtpSyncInterval=mbgLtNgCfgPtpSyncInterval, mbgLtNgCfgVP100Display2Addr=mbgLtNgCfgVP100Display2Addr, mbgLtNgClusterMasterPriority=mbgLtNgClusterMasterPriority, mbgLtNgTrapTrustedSourceError=mbgLtNgTrapTrustedSourceError, mbgLtNgCfgTrapFanUp=mbgLtNgCfgTrapFanUp, mbgLtNgNtpMrsServer=mbgLtNgNtpMrsServer, mbgLtNgTrapPowerConsumptionOk=mbgLtNgTrapPowerConsumptionOk, mbgLtNgCfgEthernetIpv4Gateway=mbgLtNgCfgEthernetIpv4Gateway, mbgLtNgCfgDisplay=mbgLtNgCfgDisplay, mbgLtNgCfgNtpIndex=mbgLtNgCfgNtpIndex, mbgLtNgCfgNtpMultiAddr=mbgLtNgCfgNtpMultiAddr, mbgLtNgCfgEmailSmarthostAuthPw=mbgLtNgCfgEmailSmarthostAuthPw, mbgLtNgCfgPtpMessageDuration=mbgLtNgCfgPtpMessageDuration)
mibBuilder.exportSymbols("MBG-SNMP-LTNG-MIB", mbgLtNgNtpMrsOffset=mbgLtNgNtpMrsOffset, mbgLtNgNtpCCStartedAt=mbgLtNgNtpCCStartedAt, mbgLtNgCfgEmailSmarthostPort=mbgLtNgCfgEmailSmarthostPort, mbgLtNgCfgVirtualIfIpv6RoutAdd=mbgLtNgCfgVirtualIfIpv6RoutAdd, mbgLtNgCfgTrapNtpNotSync=mbgLtNgCfgTrapNtpNotSync, mbgLtNgCfgVirtualIfIpv4AddrFromDhcp=mbgLtNgCfgVirtualIfIpv4AddrFromDhcp, mbgLtNgCfgNtpServerAutokey=mbgLtNgCfgNtpServerAutokey, mbgLtNgCfgNtpServerIburst=mbgLtNgCfgNtpServerIburst, mbgLtNgConfig=mbgLtNgConfig, mbgLtNgRefclockGpsPos=mbgLtNgRefclockGpsPos, mbgLtNgTrapPtpPortDisconnected=mbgLtNgTrapPtpPortDisconnected, mbgLtNgCfgPhysicalIfTable=mbgLtNgCfgPhysicalIfTable, mbgLtNgRefclockState=mbgLtNgRefclockState, mbgLtNgGroups=mbgLtNgGroups, mbgLtNgRefclockTableEntry=mbgLtNgRefclockTableEntry, mbgLtNgRefclockGpsLatitude=mbgLtNgRefclockGpsLatitude, mbgLtNgTrapSecondaryRecSync=mbgLtNgTrapSecondaryRecSync, mbgLtNgTrapNotifications=mbgLtNgTrapNotifications, mbgLtNgInfo=mbgLtNgInfo, mbgLtNgCfgPtpPriority1=mbgLtNgCfgPtpPriority1, mbgLtNgCfgTrapNtpStopped=mbgLtNgCfgTrapNtpStopped, mbgLtNgClusterCommunicationIp=mbgLtNgClusterCommunicationIp, mbgLtNgCfgEthernetIpv6Gateway=mbgLtNgCfgEthernetIpv6Gateway, mbgLtNgTrapXmrRefChanged=mbgLtNgTrapXmrRefChanged, mbgLtNgCfgVirtualIfIpv4Addr=mbgLtNgCfgVirtualIfIpv4Addr, mbgLtNgPtpDomain=mbgLtNgPtpDomain, mbgLtNgCfgPtpDomainname=mbgLtNgCfgPtpDomainname, mbgLtNgCfgPhysicalIfTableEntry=mbgLtNgCfgPhysicalIfTableEntry, mbgLtNgRefclockTimeDiff=mbgLtNgRefclockTimeDiff, mbgLtNgCfgNtpTimeScale=mbgLtNgCfgNtpTimeScale, mbgLtNgCfgPtpDscpClass=mbgLtNgCfgPtpDscpClass, mbgLtNgTrapReceiverNotResponding=mbgLtNgTrapReceiverNotResponding, mbgLtNgSysNumberOfPowerSupplies=mbgLtNgSysNumberOfPowerSupplies, mbgLtNgTrapIMSOk=mbgLtNgTrapIMSOk, mbgLtNgPtpGrandmasterMac=mbgLtNgPtpGrandmasterMac, mbgLtNgCfgPtpAnnRcptTmout=mbgLtNgCfgPtpAnnRcptTmout, mbgLtNgCfgWebLanguage=mbgLtNgCfgWebLanguage, mbgLtNgSysFanIndex=mbgLtNgSysFanIndex, mbgLtNgPtpPortLinkup=mbgLtNgPtpPortLinkup, mbgLtNgCfgVirtualIfCluster=mbgLtNgCfgVirtualIfCluster, mbgLtNgRefclockStatusA=mbgLtNgRefclockStatusA, mbgLtNgTrapSufficientSystemResources=mbgLtNgTrapSufficientSystemResources, mbgLtNgCfgNtp=mbgLtNgCfgNtp, mbgLtNgCfgVP100Display1Addr=mbgLtNgCfgVP100Display1Addr, mbgLtNgCfgWalldisplay=mbgLtNgCfgWalldisplay, mbgLtNgCfgLockFrontPanel=mbgLtNgCfgLockFrontPanel, mbgLtNgCfgSnmpV3AuthProtocol=mbgLtNgCfgSnmpV3AuthProtocol, mbgLtNgCfgTrapWarmedUp=mbgLtNgCfgTrapWarmedUp, mbgLtNgCfgVirtualIfServiceSsh=mbgLtNgCfgVirtualIfServiceSsh, mbgLtNgCfgPtpMode=mbgLtNgCfgPtpMode, mbgLtNgRefclockGpsAltitude=mbgLtNgRefclockGpsAltitude, mbgLtNgCfgPtpMcastTtl=mbgLtNgCfgPtpMcastTtl, mbgLtNgCfgVirtualIfIpv4Dhcp=mbgLtNgCfgVirtualIfIpv4Dhcp, mbgLtNgCfgSnmpWriteCommunity=mbgLtNgCfgSnmpWriteCommunity, mbgLtNgPtpTsuTime=mbgLtNgPtpTsuTime, mbgLtNgCfgPtpIndex=mbgLtNgCfgPtpIndex, mbgLtNgTrapNTPNotSync=mbgLtNgTrapNTPNotSync, mbgLtNgCfgNtpLocalClkStratum=mbgLtNgCfgNtpLocalClkStratum, mbgLtNgCfgTrapRefSrcReconnected=mbgLtNgCfgTrapRefSrcReconnected, mbgLtNgCfgAllowNetworkDiscovery=mbgLtNgCfgAllowNetworkDiscovery, mbgLtNgCfgPhysicalIfIndex=mbgLtNgCfgPhysicalIfIndex, mbgLtNgCfgRepetitions=mbgLtNgCfgRepetitions, mbgLtNgCfgWmailAddress1=mbgLtNgCfgWmailAddress1, mbgLtNgCfgPtpSyncEQltLvlSelEnable=mbgLtNgCfgPtpSyncEQltLvlSelEnable, mbgLtNgCfgPhysicalIfNetLinkMode=mbgLtNgCfgPhysicalIfNetLinkMode, mbgLtNgCfgSnmpV3AuthPassphrase=mbgLtNgCfgSnmpV3AuthPassphrase, mbgLtNgCfgPtpVlanId=mbgLtNgCfgPtpVlanId, mbgLtNgTrapLeapSecondAnnounced=mbgLtNgTrapLeapSecondAnnounced, mbgLtNgSysFan=mbgLtNgSysFan, mbgLtNgClusterReconfigurationState=mbgLtNgClusterReconfigurationState, mbgLtNgCfgPtpSyncEAvail=mbgLtNgCfgPtpSyncEAvail, mbgLtNgCfgTrapPtpNetworkUp=mbgLtNgCfgTrapPtpNetworkUp, mbgLtNgSysTempCelsius=mbgLtNgSysTempCelsius, mbgLtNgCfgPtpOutput2=mbgLtNgCfgPtpOutput2, mbgLtNgCfgFrontPanel=mbgLtNgCfgFrontPanel, mbgLtNgCfgPhysicalIfIpv6Mode=mbgLtNgCfgPhysicalIfIpv6Mode, mbgLtNgCfgSshKeyLength=mbgLtNgCfgSshKeyLength, mbgLtNgCfgSystem=mbgLtNgCfgSystem, mbgLtNgCfgNtpClientMonitoring=mbgLtNgCfgNtpClientMonitoring, mbgLtNgCfgSshShellTimeout=mbgLtNgCfgSshShellTimeout, mbgLtNgTrapXmrLimitExceeded=mbgLtNgTrapXmrLimitExceeded, mbgLtNgCfgNumberOfPhysicalIf=mbgLtNgCfgNumberOfPhysicalIf, mbgLtNgSysNumberOfFans=mbgLtNgSysNumberOfFans, mbgLtNgCfgVirtualIfTableEntry=mbgLtNgCfgVirtualIfTableEntry, mbgLtNgNtpVersion=mbgLtNgNtpVersion, mbgLtNgCfgSnmpTrapRecCommunity=mbgLtNgCfgSnmpTrapRecCommunity, mbgLtNgRefclockGpsTable=mbgLtNgRefclockGpsTable, mbgLtNgCfgVirtualIfLabel=mbgLtNgCfgVirtualIfLabel, mbgLtNgTrapReceiverSync=mbgLtNgTrapReceiverSync, mbgLtNgTrapFanUp=mbgLtNgTrapFanUp, mbgLtNgCfgNtpTableEntry=mbgLtNgCfgNtpTableEntry, mbgLtNgTrapXheRubError=mbgLtNgTrapXheRubError, mbgLtNgTrapFanDown=mbgLtNgTrapFanDown, mbgLtNgRefclockGpsLongitude=mbgLtNgRefclockGpsLongitude, mbgLtNgRefclockSubstate=mbgLtNgRefclockSubstate, mbgLtNgPtpTimeSource=mbgLtNgPtpTimeSource, mbgLtNgCfgEmailTo=mbgLtNgCfgEmailTo, mbgLtNgCfgEthernet=mbgLtNgCfgEthernet, mbgLtNgEthPortLinkTable=mbgLtNgEthPortLinkTable, mbgLtNgFdmFreq=mbgLtNgFdmFreq, mbgLtNgTrapReceiverNotSync=mbgLtNgTrapReceiverNotSync, mbgLtNgCfgTrapShsTimeLimitError=mbgLtNgCfgTrapShsTimeLimitError, mbgLtNgCfgNtpBMTableEntry=mbgLtNgCfgNtpBMTableEntry, mbgLtNgCfgTrapAntennaReconnect=mbgLtNgCfgTrapAntennaReconnect, mbgLtNgCfgPtpIpv4=mbgLtNgCfgPtpIpv4, mbgLtNgRefclockUsage=mbgLtNgRefclockUsage, mbgLtNgCfgVirtualIfIndex=mbgLtNgCfgVirtualIfIndex, mbgLtNgCfgNtpServerMinpoll=mbgLtNgCfgNtpServerMinpoll, mbgLtNgCfgPtpNameserver2=mbgLtNgCfgPtpNameserver2, mbgLtNgTrapHeartbeat=mbgLtNgTrapHeartbeat, mbgLtNgCfgLoginAccess=mbgLtNgCfgLoginAccess, mbgLtNgSysFanTable=mbgLtNgSysFanTable, mbgLtNgCfgSnmpV3SecurityLevel=mbgLtNgCfgSnmpV3SecurityLevel, mbgLtNgCfgPtpHostname=mbgLtNgCfgPtpHostname, mbgLtNgSysPsTable=mbgLtNgSysPsTable, mbgLtNgPtpIndex=mbgLtNgPtpIndex, mbgLtNgNtpCurrentState=mbgLtNgNtpCurrentState, mbgLtNgRefclockLeapSecondDate=mbgLtNgRefclockLeapSecondDate, mbgLtNgCfgSnmpEnabledVersion=mbgLtNgCfgSnmpEnabledVersion, mbgLtNgCfgPtpOpMode=mbgLtNgCfgPtpOpMode, mbgLtNgCfgNtpServerKey=mbgLtNgCfgNtpServerKey, mbgLtNgCfgNtpMultiSymKey=mbgLtNgCfgNtpMultiSymKey, mbgLtNgSysPsIndex=mbgLtNgSysPsIndex, mbgLtNgTrapFDMOk=mbgLtNgTrapFDMOk, mbgLtNgCfgPtpIpv6Avail=mbgLtNgCfgPtpIpv6Avail, mbgLtNgTraps=mbgLtNgTraps, mbgLtNgCfgTrapRefSrcDisconnected=mbgLtNgCfgTrapRefSrcDisconnected, mbgLtNgCfgTrapRefSrcLimitExceeded=mbgLtNgCfgTrapRefSrcLimitExceeded, mbgLtNgTrapPtpStateChanged=mbgLtNgTrapPtpStateChanged, mbgLtNgCfgPtpNetworkProtocol=mbgLtNgCfgPtpNetworkProtocol, mbgLtNgCfgVirtualIfIpv4BroadcastFromDhcp=mbgLtNgCfgVirtualIfIpv4BroadcastFromDhcp, mbgLtNgCfgPtpDelayReqInterval=mbgLtNgCfgPtpDelayReqInterval, mbgLtNgCfgWinpopup=mbgLtNgCfgWinpopup, mbgLtNgCfgNtpMultiInterval=mbgLtNgCfgNtpMultiInterval, mbgLtNgCfgTrapNormalOperation=mbgLtNgCfgTrapNormalOperation, mbgLtNgTrapXmrRefDisconnect=mbgLtNgTrapXmrRefDisconnect, mbgLtNgCfgTrapNetworkUp=mbgLtNgCfgTrapNetworkUp, mbgLtNgCfgSsh=mbgLtNgCfgSsh, mbgLtNgRefclockTable=mbgLtNgRefclockTable, mbgLtNgCfgEmailSmarthostAuth=mbgLtNgCfgEmailSmarthostAuth, mbgLtNgEthPortLinkIndex=mbgLtNgEthPortLinkIndex, mbgLtNgSysFanError=mbgLtNgSysFanError, mbgLtNgClusterClockClass=mbgLtNgClusterClockClass, mbgLtNgRefclockGpsTableEntry=mbgLtNgRefclockGpsTableEntry, mbgLtNgTrapSecondaryRecNotResp=mbgLtNgTrapSecondaryRecNotResp, mbgLtNgCfgTrapRefclockNotSynchronized=mbgLtNgCfgTrapRefclockNotSynchronized, mbgLtNgCfgNtpBMTable=mbgLtNgCfgNtpBMTable, mbgLtNgNtpCCNumberOfClients=mbgLtNgNtpCCNumberOfClients, mbgLtNgCfgPtp=mbgLtNgCfgPtp, mbgLtNgTrapPowerSupplyUp=mbgLtNgTrapPowerSupplyUp, mbgLtNgCfgVirtualIfIpv4DnsFromDhcp=mbgLtNgCfgVirtualIfIpv4DnsFromDhcp, mbgLtNgCfgTrapNtpSync=mbgLtNgCfgTrapNtpSync, mbgLtNgTrapsGroup=mbgLtNgTrapsGroup, mbgLtNgObjectsGroup=mbgLtNgObjectsGroup, mbgLtNgCfgSyslogLoglevel=mbgLtNgCfgSyslogLoglevel, mbgLtNgCmdSetTime=mbgLtNgCmdSetTime, mbgLtNgCfgEthernetGenClusterIp=mbgLtNgCfgEthernetGenClusterIp, mbgLtNgClusterMasterSerial=mbgLtNgClusterMasterSerial, mbgLtNgCfgTrapLeapSecAnnounced=mbgLtNgCfgTrapLeapSecAnnounced, mbgLtNgTrapIMSError=mbgLtNgTrapIMSError, mbgLtNgCfgPtpSyncESdhNwOption=mbgLtNgCfgPtpSyncESdhNwOption, mbgLtNgTrapPowerSupplyFailure=mbgLtNgTrapPowerSupplyFailure, mbgLtNgCfgPtpSyncEEnabled=mbgLtNgCfgPtpSyncEEnabled, mbgLtNgCfgPtpIpv6McastScope=mbgLtNgCfgPtpIpv6McastScope, mbgLtNgCfgSNMP=mbgLtNgCfgSNMP, mbgLtNgNtpCCDuration=mbgLtNgNtpCCDuration, mbgLtNgClusterPortState=mbgLtNgClusterPortState, mbgLtNgTrapNTPSync=mbgLtNgTrapNTPSync, mbgLtNgCfgTrapPtpNetworkDown=mbgLtNgCfgTrapPtpNetworkDown, mbgLtNgCfgVirtualIfIpv4DomainFromDhcp=mbgLtNgCfgVirtualIfIpv4DomainFromDhcp, mbgLtNgTrapSHSTimeLimitOk=mbgLtNgTrapSHSTimeLimitOk, mbgLtNgCfgVirtualIfAssigned=mbgLtNgCfgVirtualIfAssigned)
